;; Gambler's Problem

;; time java -cp /home/john/.m2/repository/org/clojure/clojure/1.7.0/clojure-1.7.0.jar clojure.main -i gamblers.clj


(defn abs[x] (if (< x 0) (- x) x))
(map abs (range -5 5)) ; (5 4 3 2 1 0 1 2 3 4)

(defn linfinity [v1 v2]
  (assert (= (count v1) (count v2)))
  (reduce max (map abs (map - v1 v2))))

(linfinity [0 2 3] [0 -2 3])

  

;; We got states 0..100, let's take initial values 0

;; everything is worthless
(def v0 (vec (repeat 101 0 )))

v0 ; [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

(defn update [v, n, stake]
  (if (#{0,100} n) 0 
      (let [win  (+ n stake)
            loss (- n stake)]
        (assert (and (<= 0 loss) (<= win 100)))
        (cond (and (< 0 loss) (< win 100))
              (+ (* 0.4 (v win)) (* 0.6 (v loss)))
              (= 0 loss)
              (+ (* 0.4 (v win)) (* 0.6 (v loss)))
              (= 100 win)
              (+ (* 0.4 (+ 1 (v win))) (* 0.6 (v loss)))
              :else :fuuuck))))


(update v0 100 0) ; 0 
(update v0 99  0) ; 0.0
(update v0 99  1) ; 0.4
(update v0 98  0) ; 0.0
(update v0 98  1) ; 0.0
(update v0 98  2) ; 0.4

(def v1 (mapv (fn[n] (update v0 n 1)) (range 0 101)))
(update v1 100 0) ; 0 ; 0 

(update v1 99  0) ; 0.4 ; 0.4 
(update v1 99  1) ; 0.4 ; 0.4 

(update v1 98  0) ; 0.0 ; 0.0 
(update v1 98  1) ; 0.16000000000000003 ; 0.16000000000000003
(update v1 98  2) ; 0.4 ; 0.4

(update v1 97  0) ; 0.0 ; 0.0
(update v1 97  1) ; 0.0 ; 0.0
(update v1 97  2) ; 0.16000000000000003 ; 0.16000000000000003
(update v1 97  3) ; 0.4 ; 0.4






;; always bet one
(def pi0 (vec (repeat 101 1)))

pi0 ; [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]

(defn updater [policy]
  (fn [v n] (assoc v n (update v n (policy n)))))

(def v01 (reduce (updater pi0) v0 (range 0 101)))

v01 ; [0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4 0]

(def v02 (reduce (updater pi0) v01 (range 0 101)))

v02 ; [0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.16000000000000003 0.49600000000000005 0]



(defn jacobi [v pi] (reduce (updater pi) v (range 0 101)))

((fn[v] (jacobi v pi0)) v0)

(take 10 (map first (iterate (fn[v] (jacobi v pi0)) v0)))

(def v0series (iterate (fn[v] (jacobi v pi0)) v0))

(take 10 v0series) ;  ;

(def v0shifts (map linfinity v0series (drop 1 v0series)))

(count (take-while (fn[x] (> (abs x) 0.000001)) v0shifts))

(def v2 (nth v0series 141))


(defn available-actions [s]
  (range 1 (inc (min s (- 100 s)))))

(available-actions 99) ; (0 1)
(available-actions 97) ; (0 1 2 3)


(sort
 (for [a (available-actions 97)] [(update v1 97 a) a])) ; ([0.0 0] [0.0 1] [0.16000000000000003 2] [0.4 3])

(second (last (sort
               (for [a (available-actions 97)] [(update v1 97 a) a])))) ; 3

(defn sorted-actions [v n]
  (reverse (sort
   (for [a (available-actions n)] [(update v n a) a]))))

(defn optimal-action [v n]
  (second (first (sorted-actions v n))))


(sorted-actions v1 100) ; ([0 0])
(sorted-actions v1 99) ; ([0.4 1] [0.4 0]) ; ([0.4 0] [0.4 1])
(sorted-actions v1 50) ; ([0.16000000000000003 49] [0.0 50] [0.0 48] [0.0 47] [0.0 46] [0.0 45] [0.0 44] [0.0 43] [0.0 42] [0.0 41] [0.0 40] [0.0 39] [0.0 38] [0.0 37] [0.0 36] [0.0 35] [0.0 34] [0.0 33] [0.0 32] [0.0 31] [0.0 30] [0.0 29] [0.0 28] [0.0 27] [0.0 26] [0.0 25] [0.0 24] [0.0 23] [0.0 22] [0.0 21] [0.0 20] [0.0 19] [0.0 18] [0.0 17] [0.0 16] [0.0 15] [0.0 14] [0.0 13] [0.0 12] [0.0 11] [0.0 10] [0.0 9] [0.0 8] [0.0 7] [0.0 6] [0.0 5] [0.0 4] [0.0 3] [0.0 2] [0.0 1] [0.0 0])

(optimal-action v1 100) ; 0
(optimal-action v1 99) ; 1
(optimal-action v1 50) ; 49

(def pi1 (mapv (fn [n] (optimal-action v1 n)) (range 101)))

pi1 ; [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0]


(defn value-update [v n]
  (update v n (optimal-action v n)))

(value-update v0 0) ; 0
(value-update v0 1) ; 0.0
(value-update v0 2) ; 0.0

(map (fn [n] (value-update v0 n)) (range 0 101)) ; (0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0)

(defn value-iterate [v]
  (mapv (fn [n] (value-update v n)) (range 0 101)))

(def vv (value-iterate v0)) ; #'boot.user/vv
vv ; [0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0]
(def vvv (value-iterate vv)) ; #'boot.user/vvv
vvv ; [0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.16000000000000003 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0.64 0]

(def vvseries (iterate value-iterate v0))

(def vvshifts (map linfinity vvseries (drop 1 vvseries)))


(count (take-while (fn[x] (> (abs x) 0.000000000000000000000000000001)) vvshifts)) ; 57 ; 57 ; 56 ; 39

(def optv (nth vvseries 57)) ; [0 0.002065624776544316 0.00516406194136079 0.00922547106779389 0.012910154853401974 0.017385398981324286 0.023063677669484722 0.02781411305627054 0.03227538713350493 0.037685072795366426 0.04346349745331071 0.05035446998069343 0.057659194173711806 0.06523937486592661 0.06953528264067635 0.07443123938879458 0.08068846783376232 0.08661104367721989 0.09421268198841606 0.10314362491955596 0.10865874363327677 0.11596662620633194 0.12588617495173357 0.13357997572379918 0.1441479854342795 0.15478902470271128 0.1630984371648165 0.16774609291204123 0.17383820660169086 0.17936523228010298 0.18607809847198645 0.19459551650422713 0.2017211695844058 0.20841308070025744 0.2165276091930497 0.22519524617996606 0.23553170497104015 0.24648879126056772 0.2578590622988899 0.26430292396101457 0.27164685908319186 0.2810327017506435 0.28991656551582984 0.30131902298262414 0.31471543737933394 0.3229881154499151 0.3339499393094979 0.3488292624276004 0.3603699635856987 0.37622197815141933 0.3869725617567782 0.40309843716481647 0.4077460929120412 0.41383820660169085 0.41936523228010303 0.42607809847198647 0.4345955165042271 0.4417211695844058 0.4484130807002574 0.4565276091930497 0.4651952461799661 0.47553170497104014 0.48648879126056777 0.49785906229888993 0.5043029239610145 0.5116468590831919 0.5210327017506435 0.5299165655158298 0.5413190229826241 0.5547154373793339 0.5629881154499151 0.5739499393094979 0.5888292624276004 0.6003699635856987 0.6162219781514192 0.6321835370540669 0.6446476557472247 0.6516191393680618 0.6607573099025363 0.6690478484201545 0.6791171477079796 0.6918932747563407 0.7025817543766086 0.7126196210503861 0.7247914137895746 0.7377928692699491 0.7532975574565602 0.7697331868908515 0.7867885934483348 0.7964543859415218 0.8074702886247878 0.8215490526259652 0.8348748482737447 0.8519785344739361 0.8720731560690009 0.8844821731748727 0.9009249089642468 0.9232438936414006 0.9405549453785482 0.9643329672271289 0]

(def pi-optimal (mapv (fn [n] (optimal-action optv n)) (range 101)))

pi-optimal ; [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 0 21 22 23 24 25 26 27 28 29 30 31 32 33 0 35 36 0 38 39 40 41 42 43 44 45 46 47 48 49 1 49 48 47 0 45 44 43 42 41 40 39 0 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 0 1 0]

(sorted-actions optv 20) ; ([0.10865874363327677 0] [0.10865874363327675 20] [0.10827282543426636 1] [0.10696054445033243 19] [0.10696054445033243 6] [0.10688207917374307 2] [0.10657435351436126 5] [0.10624206208437245 7] [0.10624206208437244 18] [0.1060722748739692 4] [0.10539861649585161 3] [0.10413079914490343 17] [0.10413079914490343 8] [0.10195877490045725 16] [0.10195877490045724 9] [0.100509337860781 15] [0.100509337860781 10] [0.10044925027891072 14] [0.10044925027891072 11] [0.1000537001138653 13] [0.10005370011386527 12])
(optv 20) ; 0.10865874363327677

(println optv)
(println pi-optimal)

(use 'simple-plotter.core)



