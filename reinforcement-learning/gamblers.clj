;; Gambler's Problem

(defn abs[x] (if (< x 0) (- x) x))
(map abs (range -5 5)) ; (5 4 3 2 1 0 1 2 3 4)

(defn linfinity [v1 v2]
  (assert (= (count v1) (count v2)))
  (reduce max (map abs (map - v1 v2))))

(linfinity [0 2 3] [0 -2 3])

  

;; We got states 0..100, let's take initial values 0

;; everything is worthless
(def v0 (vec (repeat 101 0 )))

v0 ; [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

(defn update [v, n, stake]
  (if (#{0,100} n) 0 
      (let [win  (+ n stake)
            loss (- n stake)]
        (assert (and (<= 0 loss) (<= win 100)))
        (cond (and (< 0 loss) (< win 100))
              (+ (* 0.4 (v win)) (* 0.6 (v loss)))
              (= 0 loss)
              (+ (* 0.4 (v win)) (* 0.6 (v loss)))
              (= 100 win)
              (+ (* 0.4 (+ 1 (v win))) (* 0.6 (v loss)))
              :else :fuuuck))))


(update v0 100 0) ; 0 
(update v0 99  0) ; 0.0
(update v0 99  1) ; 0.4
(update v0 98  0) ; 0.0
(update v0 98  1) ; 0.0
(update v0 98  2) ; 0.4


;; always bet one
(def pi0 (vec (repeat 101 1)))

pi0 ; [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]

(defn updater [policy]
  (fn [v n] (assoc v n (update v n (policy n)))))

(def v01 (reduce (updater policy) v0 (range 0 101)))

v01 ; [0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.4 0]

(def v02 (reduce (updater policy) v01 (range 0 101)))

v02 ; [0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.16000000000000003 0.49600000000000005 0]

(defn jacobi [v pi] (reduce (updater pi) v (range 0 101)))

((fn[v] (jacobi v pi0)) v0)

(take 10 (map first (iterate (fn[v] (jacobi v pi0)) v0)))

(def v0series (iterate (fn[v] (jacobi v pi0)) v0))

(take 10 v0series) ;  ;

(def v0shifts (map linfinity v0series (drop 1 v0series)))

(count (take-while (fn[x] (> (abs x) 0.000001)) v0shifts))

(def v2 (nth vseries 141))

v2 ; [0 2.4273434576787555E-24 8.175524612983307E-24 2.2398345687917716E-23 5.768247682621185E-23 1.4430935591880815E-22 3.540122278524833E-22 8.54133464263185E-22 2.0292419365566994E-21 4.750273818338088E-21 1.0961719084860009E-20 2.4945038640078527E-20 5.60005958062417E-20 1.240662750887747E-19 2.7133833979093295E-19 5.860078198698961E-19 1.2501561189551955E-18 2.6352573664989602E-18 5.4904127232993695E-18 1.1309189233466478E-17 2.3036695723033188E-17 4.641789439930633E-17 9.254187966130524E-17 1.8259417453679124E-16 3.566453103877571E-16 6.897469083224675E-16 1.3211339116388588E-15 2.5067189790694715E-15 4.712614943031388E-15 8.780303982972835E-15 1.6215875476433115E-14 2.969236448947383E-14 5.39152267282683E-14 9.71018908626566E-14 1.734920531913113E-13 3.0757570965368266E-13 5.411640066531992E-13 9.451335031392587E-13 1.6388038392846905E-12 2.8217065144875944E-12 4.825348503886713E-12 8.197057087672974E-12 1.3835018646590173E-11 2.3204587879988175E-11 3.86829787427514E-11 6.410581172303925E-11 1.056296428710561E-10 1.7308706951630587E-10 2.8210670931785754E-10 4.5741654761621467E-10 7.379719156370073E-10 1.1848880191025594E-9 1.8936707124499222E-9 3.0130172395139293E-9 4.773634958656561E-9 7.532302026659245E-9 1.1839072088773641E-8 1.8539559276764747E-8 2.8930311703261378E-8 4.4994413626146046E-8 6.975818241718161E-8 1.0783044721072254E-7 1.6621686256069384E-7 2.555481983303993E-7 3.91931318804831E-7 5.997362614377226E-7 9.157899087031517E-7 1.3956824014083047E-6 2.1232459427609874E-6 3.224795894185334E-6 4.8905194149830185E-6 7.406589860907367E-6 1.1203374487425602E-5 1.6927786820330453E-5 2.55518605189989E-5 3.8535659384426925E-5 5.807169440910839E-5 8.745160248326721E-5 1.3161621611455025E-4 1.9798071458407588E-4 2.976723872654547E-4 4.4738729871439734E-4 6.721752815717196E-4 0.0010096173857473217 0.0015160919633938727 0.0022761736427561875 0.0034167315509625318 0.005128076302505346 0.00769568000099849 0.011547755593507973 0.017326625049444745 0.02599577052991281 0.039000409748957465 0.05850835727611829 0.08777131434633881 0.1316668009632 0.1975110509066895 0.29627835049059426 0.44443004226230487 0.6666580253573829 0]

(update v1 100 0) ; 0 

(update v1 99  0) ; 0.4 
(update v1 99  1) ; 0.4 

(update v1 98  0) ; 0.0 
(update v1 98  1) ; 0.16000000000000003
(update v1 98  2) ; 0.4

(update v1 97  0) ; 0.0
(update v1 97  1) ; 0.0
(update v1 97  2) ; 0.16000000000000003
(update v1 97  3) ; 0.4

(defn available-actions [s]
  (range (inc (min s (- 100 s)))))

(available-actions 99)
(available-actions 97)

(sort
 (for [a (available-actions 97)] [(update v1 97 a) a]))


