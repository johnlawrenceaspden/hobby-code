;; This is broken and needs fixing and tidying up

;; t 1  2 3
;; 4 5  6 7
;; 8 9 10 11
;; 121314 t

(defn co [n]
  [(quot n 4) (rem n 4)])

(defn oc [[row col]]
  (+ col (* row 4)))

(map co (range 16)) ; ([0 0] [0 1] [0 2] [0 3] [1 0] [1 1] [1 2] [1 3] [2 0] [2 1] [2 2] [2 3] [3 0] [3 1] [3 2] [3 3])
(map (comp oc co) (range 16)) ; (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)

(defn prim-adj [[row col]]
  [[(inc row) col][(dec row) col][row (inc col)][row (dec col)]])

(prim-adj [2 2]) ; [[3 2] [1 2] [2 3] [2 1]]

(defn crop [n]
  (cond (< n 0) 0
        (> n 3) 3
        :else n))

(defn crop-adj [[row col]]
  (for [[r c] (prim-adj [row col])] [(crop r) (crop c)]))

(map oc (crop-adj (co 7))) ; (11 3 7 6)

(defn terminal [n]
  (case n
    0  :t
    15 :t
    n))

(defn go-to [n]
  (if (= n :t) (list :t)
      (map terminal (map oc (periodic-adj (co n))))))

(def cells (cons :t (range 1 15)))

(map go-to cells) ; ((:t) (5 1 2 :t) (6 2 3 1) (7 3 3 2) (8 :t 5 4) (9 1 6 4) (10 2 7 5) (11 3 7 6) (12 4 9 8) (13 5 10 8) (14 6 11 9) (:t 7 11 10) (12 8 13 12) (13 9 14 12) (14 10 :t 13))

;; t 1  2 3
;; 4 5  6 7
;; 8 9 10 11
;; 121314 t

;; 9 -> 5 8 10 13
(go-to 9) ; (13 5 10 8)

;; 1 -> t 2 5 1
(go-to 1) ; (5 1 2 :t)

;; recurrence for value functions under the random policy gives us
;; v[9]=-1 + 1/4(v[9] + v[9] + v[9] +v [9])
;; v[:t] = v[:t]
;; v[4] = -1 + 1/4 (v[4] + v[5] + v[8] + v[:t])
;; etc

;; So let's take an initial value function:
(def v (into {} (for [c cells] [c 0.0])))

;; and use the RHS of the recurrence
(defn reward [n] (if (= n :t) 0 -1))

(defn up[v n]
  (let [g (go-to n)]
    (+ (reward n) (/ 
           (reduce + (map v (go-to n)))
           (count g)))))

;; To make an update rule
;; v[4] <- -1 + 1/4 (v[4] + v[5] + v[8] + v[:t])

(up v 1) ; -1.0
(up v :t) ; 0.0

(into {} (for [c cells] [c (up v c)])) ; {7 -1.0, 1 -1.0, 4 -1.0, 13 -1.0, 6 -1.0, 3 -1.0, 12 -1.0, 2 -1.0, 11 -1.0, 9 -1.0, 5 -1.0, :t 0.0, 14 -1.0, 10 -1.0, 8 -1.0}

(def v2 (into {} (for [c cells] [c (up v c)])))

(into {} (for [c cells] [c (up v2 c)])) ; {7 -2, 1 -7/4, 4 -7/4, 13 -2, 6 -2, 3 -2, 12 -2, 2 -2, 11 -7/4, 9 -2, 5 -2, :t 0, 14 -7/4, 10 -2, 8 -2}

(defn jacobi [v] (into {} (for [c cells] [c (up v c)])))

(defn twosf   [x]  (float (/ (Math/round (* x 100.0)) 100)))

(jacobi v) ; {7 -1, 1 -1, 4 -1, 13 -1, 6 -1, 3 -1, 12 -1, 2 -1, 11 -1, 9 -1, 5 -1, :t 0, 14 -1, 10 -1, 8 -1}
(for [[a b] (nth  (iterate jacobi v) 3)] (twosf b)) ; (-2.94 -2.44 -2.44 -2.94 -3.0 -3.0 -3.0 -2.94 -2.44 -3.0 -2.87 0.0 -2.44 -2.87 -2.94)
(for [[a b] (nth  (iterate jacobi v) 30)] (twosf b)) ; (-16.1 -11.37 -11.37 -16.1 -16.12 -17.63 -17.63 -16.1 -11.37 -16.12 -14.56 0.0 -11.37 -14.56 -16.1)
(for [[a b] (nth  (iterate jacobi v) 60)] (twosf b)) ; (-19.24 -13.49 -13.49 -19.24 -19.25 -21.15 -21.15 -19.24 -13.49 -19.25 -17.33 0.0 -13.49 -17.33 -19.24)
(for [[a b] (nth  (iterate jacobi v) 90)] (twosf b)) ; (-19.85 -13.9 -13.9 -19.85 -19.85 -21.84 -21.84 -19.85 -13.9 -19.85 -17.87 0.0 -13.9 -17.87 -19.85)
(for [[a b] (nth  (iterate jacobi v) 120)] (twosf b)) ; (-19.97 -13.98 -13.98 -19.97 -19.97 -21.97 -21.97 -19.97 -13.98 -19.97 -17.97 0.0 -13.98 -17.97 -19.97)
(for [[a b] (nth  (iterate jacobi v) 150)] (twosf b)) ; (-19.99 -14.0 -14.0 -19.99 -19.99 -21.99 -21.99 -19.99 -14.0 -19.99 -18.0 0.0 -14.0 -18.0 -19.99)
(for [[a b] (nth  (iterate jacobi v) 180)] (twosf b)) ; (-20.0 -14.0 -14.0 -20.0 -20.0 -22.0 -22.0 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)
(for [[a b] (nth  (iterate jacobi v) 170)] (twosf b)) ; (-20.0 -14.0 -14.0 -20.0 -20.0 -22.0 -22.0 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)
(for [[a b] (nth  (iterate jacobi v) 160)] (twosf b)) ; (-20.0 -14.0 -14.0 -20.0 -20.0 -22.0 -22.0 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)
(for [[a b] (nth  (iterate jacobi v) 155)] (twosf b)) ; (-20.0 -14.0 -14.0 -20.0 -20.0 -22.0 -22.0 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)
(for [[a b] (nth  (iterate jacobi v) 152)] (twosf b)) ; (-20.0 -14.0 -14.0 -20.0 -20.0 -21.99 -21.99 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)
(for [[a b] (nth  (iterate jacobi v) 151)] (twosf b)) ; (-19.99 -14.0 -14.0 -19.99 -19.99 -21.99 -21.99 -19.99 -14.0 -19.99 -18.0 0.0 -14.0 -18.0 -19.99)

(def vfinal (for [[a b] (nth  (iterate jacobi v) 152)] (twosf b)))

vfinal ; (-20.0 -14.0 -14.0 -20.0 -20.0 -21.99 -21.99 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)


(def inplace (fn [v n] (assoc v n (up v n))))

(inplace v 1) ; {7 0, 1 -1, 4 0, 13 0, 6 0, 3 0, 12 0, 2 0, 11 0, 9 0, 5 0, :t 0, 14 0, 10 0, 8 0}

(go-to 1) ; (5 1 2 :t)

(map v (go-to 1)) ; (0 0 0 0)

(inplace v :t) ; {7 0, 1 0, 4 0, 13 0, 6 0, 3 0, 12 0, 2 0, 11 0, 9 0, 5 0, :t 0, 14 0, 10 0, 8 0}

(reduce inplace v cells) ; {7 -7/4, 1 -1, 4 -1, 13 -7/4, 6 -27/16, 3 -21/16, 12 -21/16, 2 -5/4, 11 -243/128, 9 -27/16, 5 -3/2, :t 0, 14 -243/128, 10 -59/32, 8 -5/4}
(reduce inplace (reduce inplace v cells) cells) ; {7 -1743/512, 1 -31/16, 4 -31/16, 13 -1743/512, 6 -829/256, 3 -699/256, 12 -699/256, 2 -163/64, 11 -3295/1024, 9 -829/256, 5 -45/16, :t 0, 14 -3295/1024, 10 -1827/512, 8 -163/64}

(defn gauss-seidel [v] (reduce inplace v cells))

(gauss-seidel v) ; {7 -1.75, 1 -1.0, 4 -1.0, 13 -1.75, 6 -1.6875, 3 -1.3125, 12 -1.3125, 2 -1.25, 11 -1.8984375, 9 -1.6875, 5 -1.5, :t 0.0, 14 -1.8984375, 10 -1.84375, 8 -1.25}
(nth (iterate gauss-seidel v) 10) ; {7 -11.8633986227901, 1 -7.82506756017392, 4 -7.82506756017392, 13 -11.8633986227901, 6 -11.769337388334861, 3 -12.227655033372685, 12 -12.227655033372685, 2 -11.121818717405404, 11 -8.81387888655695, 9 -11.769337388334861, 5 -10.420371658008662, :t 0.0, 14 -8.81387888655695, 10 -11.053818103924186, 8 -11.121818717405404}
(for [[a b] (nth  (iterate gauss-seidel v) 3)] (twosf b)) ; (-4.88 -2.82 -2.82 -4.88 -4.71 -4.18 -4.18 -3.83 -4.26 -4.71 -4.03 0.0 -4.26 -4.96 -3.83)
(for [[a b] (nth  (iterate gauss-seidel v) 30)] (twosf b)) ; (-18.59 -12.93 -12.93 -18.59 -18.57 -20.3 -20.3 -18.46 -13.1 -18.57 -16.68 0.0 -13.1 -16.79 -18.46)
(for [[a b] (nth  (iterate gauss-seidel v) 60)] (twosf b)) ; (-19.9 -13.92 -13.92 -19.9 -19.9 -21.88 -21.88 -19.89 -13.93 -19.9 -17.9 0.0 -13.93 -17.91 -19.89)
(for [[a b] (nth  (iterate gauss-seidel v) 90)] (twosf b)) ; (-19.99 -13.99 -13.99 -19.99 -19.99 -21.99 -21.99 -19.99 -14.0 -19.99 -17.99 0.0 -14.0 -17.99 -19.99)
(for [[a b] (nth  (iterate gauss-seidel v) 120)] (twosf b)) ; (-20.0 -14.0 -14.0 -20.0 -20.0 -22.0 -22.0 -20.0 -14.0 -20.0 -18.0 0.0 -14.0 -18.0 -20.0)



(reduce inplace (reduce inplace v cells) cells)
(def f (reduce inplace (reduce inplace (reduce inplace v cells) cells) cells))



(for [[k val] f] [k (twosf val)]) ; ([7 -4.88] [1 -2.82] [4 -2.82] [13 -4.88] [6 -4.71] [3 -4.18] [12 -4.18] [2 -3.83] [11 -4.26] [9 -4.71] [5 -4.03] [:t 0.0] [14 -4.26] [10 -4.96] [8 -3.83])


          




