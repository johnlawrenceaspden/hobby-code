# ;; -*- mode: Shell-script; -*-
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
# commented this out because it sods everything up, but is probably important on debian, so don't copy it back to 
# home machines!
#[ -z "$PS1" ] && return

# This is not the right place to set the PATH. Do that in ~/.profile

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\W\$ '
     PS1='\e[7m\w\e[0m\n\u@\h\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ] && [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias lsal='ls --color=auto -al'
    alias lsa='ls --color=auto -a'
    alias lsl='ls --color=auto -l'
#    alias dir='ls --color=auto --format=vertical'
#    alias vdir='ls --color=auto --format=long'
#    alias ll='ls --color=auto -Falh'
#    alias la='ls --color=auto -A'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias cgrep='grep --color=auto --context=10'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
shopt -s cmdhist                     #multiline commands are one history item
export HISTIGNORE="ls:[bf]g:exit"  #ignore ls, bg, fg & exit in history
export HISTFILESIZE=500000
export HISTSIZE=500000

#see http://www.ukuug.org/events/linux2003/papers/bash_tips/
shopt -s histappend
#PROMPT_COMMAND='history -a ; history -n' #fix new window problem: every time you get a new prompt, update and reload history file
PROMPT_COMMAND='history -a ;' #fix new window problem: just update. history -n to reload the combined history

#Remember M-. gets the arguments of previous commands

#show doc files for command
function doc {  pushd "/usr/share/doc/$1" && ls ; }
export -f doc

#function emacs #open emacs in background and disown it
#{
#  echo "emacs function backgrounds and disowns emacs-snapshot-gtk; see .bashrc"
#  command emacs-snapshot-gtk "$@" & disown
#}
#add similar entries for commonly used graphical programs



alias clj='rlwrap clojure'

function fnd
{
    echo find . -iname "$1"
    command find . -iname "$1"
}

function fndg 
{  
    echo example: 'fndg \*.c void'
    command find . -name "$1" -type f -print0 | xargs -0 -e grep --color -nH -e "$2"
}

alias h='history 10'



alias unisondesktop2dellmini='unison /home/john/Desktop/unison ssh://john@dell-mini//home/john/Desktop/unison'
alias unisondesktop2mini2='unison /home/john/Desktop/unison ssh://john@mini-2//home/john/Desktop/unison'
alias unisonmini2desktop='unison /home/john/Desktop/unison ssh://john@ssh.aspden.com//home/john/Desktop/unison'
alias unisondesktop2externaldrive='unison /home/john/Desktop/unison /mnt/wdexternal/unison'

alias sw='cd ~/hobby-code && mvn -f pom.xml clojure:swank'
alias ssw='cd ~/hobby-code && mvn -f simple.pom.xml clojure:swank'
alias cgg='cd ~/hobby-code/ && git pull origin master && git gui'
alias lsrt='ls -al --color=auto --reverse --sort=time'
alias go='gnome-open'

alias digbysocks='curl -v http://172.16.1.1:8000 -d agree=1 -d redirurl=http://www.google.com -d accept=Continue && ssh -D 9999 ssh.aspden.com'

function mktags
{
    find .  \( -name "*.[ch]" -or -name "*.inc" -or -name "*.s" -or -name "*.mk" \) -print0 \
        | xargs -0 etags -a
}



# #stuff added for solarflare build

# #PATH=$PATH:/home/jla/myco/chip_test/scripts
# #PATH=$PATH:/projects/huntington_A0/Release/ef10-tools/v1_14/bin/
# #export PATH

# #export PROJ_DIR=/projects/huntington_A0/Work/$USER/hunt/lom

# # solarflare productivity aliases

# # this one is for running continuous sims. The killer window will destroy all processes on anvil
# # shortly after the screensaver activates, so that you don't leave expensive sims running over lunch 
# alias anvilicious="gnome-terminal --geometry=110x40+1200+10 --profile anvil \
# --tab --title=Desktop --profile default \
# --tab --title=anvil \
# --tab --title=uart1 \
# --tab --title=hwlog1  \
# --tab --title=cosim1 \
# --tab --title=uart2 \
# --tab --title=hwlog2 \
# --tab --title=cosim2 \
# --tab --title=killer -e '/home/jla/hobby-code/screensaveridle.pl'"

# # usual configuration for running jlahacks, with simulator, uart, hwlog, and verdi windows, plus a back up sim 
# alias anvilsims="gnome-terminal --geometry=88x40+1200+10 --profile anvil \
# --tab --title=sim1 \
# --tab --title=uart1  \
# --tab --title=hwlog1 \
# --tab --title=verdi1 \
# --tab --title=sim2 \
# --tab --title=uart2 \
# --tab --title=hwlog2 \
# --tab --title=verdi2 \
# "

# # occasional need to run four in parallel
# alias anvil4sims="gnome-terminal --geometry=88x40+1200+10 --profile anvil \
# --tab --title=sim1 \
# --tab --title=hwlog1 \
# --tab --title=sim2 \
# --tab --title=hwlog2 \
# --tab --title=sim3 \
# --tab --title=hwlog3 \
# --tab --title=sim4 \
# --tab --title=hwlog4 \
# "

# # various windows for building different versions of the hardware
# alias anvilcompilers="gnome-terminal --geometry=122x40+1200+10 --profile anviltcsh \
# --tab --title=magicmipson\ svn \
# --tab --title=krserdesonly\ svn \
# --tab --title=serdes\ svn \
# --tab --title=Desktop --profile default \
# --tab --title=gitsvnhunt --profile default \
# "
# #--tab --title=mbistfastfuncfast\ svn \
# #--tab --title=magicmipson\ svngit \
# #--tab --title=mbistfastfuncfast\ svngit\
# #--tab --title=magicmipson\ buildintree \

# # for running continuous sims, with their /9p directories pointed at chip_test so that you can recompile tests without having to restart the sims
# alias cosim1="export COSIM_IDENTITY=jla  && time ~/myco/chip_test/src/tools/cosim/esnap --load --passthrough ~/myco/chip_test"
# alias cosim2="export COSIM_IDENTITY=jla2 && time ~/myco/chip_test/src/tools/cosim/esnap --load --passthrough ~/myco/chip_test"


# alias hwlog1="reset && clear && date && ls -al /local/scratch/esnap_jla/hwlog  ; tail -n 100000 -F /local/scratch/esnap_jla/hwlog"
# alias hwlog2="reset && clear && date && ls -al /local/scratch/esnap_jla2/hwlog ; tail -n 100000 -F /local/scratch/esnap_jla2/hwlog"
# alias hwlog3="reset && clear && date && ls -al /local/scratch/esnap_jla3/hwlog ; tail -n 100000 -F /local/scratch/esnap_jla3/hwlog"
# alias hwlog4="reset && clear && date && ls -al /local/scratch/esnap_jla4/hwlog ; tail -n 100000 -F /local/scratch/esnap_jla4/hwlog"

# alias uart1="reset && clear && date && ls -al /local/scratch/esnap_jla/uart0.log  ; tail -n 100000 -F /local/scratch/esnap_jla/uart0.log"
# alias uart2="reset && clear && date && ls -al /local/scratch/esnap_jla2/uart0.log ; tail -n 100000 -F /local/scratch/esnap_jla2/uart0.log"
# alias uart3="reset && clear && date && ls -al /local/scratch/esnap_jla3/uart0.log ; tail -n 100000 -F /local/scratch/esnap_jla3/uart0.log"
# alias uart4="reset && clear && date && ls -al /local/scratch/esnap_jla4/uart0.log ; tail -n 100000 -F /local/scratch/esnap_jla4/uart0.log"

# # anvil process control
# alias anvkill="ssh anvil ps -ef | grep jla; ssh anvil pkill -9 -u jla ; ssh anvil ps -ef | grep jla"
# alias anvcheck="ssh anvil ps -ef | grep jla"


#alias vcstatuses="echo ~/myco/firmwaresrc && cd ~/myco/firmwaresrc && hg status && echo not checking outgoing ; echo ~/myco/chip_test && cd ~/myco/chip_test/ && hg status && echo not checking outgoing ; echo ~/hobby-code && cd ~/hobby-code/ && git status && git log origin/solarflare..solarflare ; echo ~/Desktop/solarflare && cd ~/Desktop/solarflare && hg status && hg outgoing ; cd /projects/huntington_A0/Work/jla/gitsvnhunt && git status && git log remotes/trunk..HEAD "

# alias verdi1="tcsh -c 'cd /projects/huntington_A0/Work/jla/hunt/lom ; verdi -lib  /projects/huntington_A0/Work/jla/hunt/lom/dv/blk/farmi_lite/sim/deblib -top 'platm_tb_top' -nologo -ssf /local/scratch/esnap_jla/tb_top.fsdb -sswr ~/myco/firmwaresrc/favourite-signals.rc'"

# alias verdi2="tcsh -c 'cd /projects/huntington_A0/Work/jla/hunt/lom ; verdi -lib  /projects/huntington_A0/Work/jla/hunt/lom/dv/blk/farmi_lite/sim/deblib -top 'platm_tb_top' -nologo -ssf /local/scratch/esnap_jla2/tb_top.fsdb -sswr ~/myco/firmwaresrc/favourite-signals.rc'"

alias githbc='git --git-dir=/home/jla/hobby-code/.git --work-tree=/home/jla/hobby-code'

alias hgcleanforce='hg status --ignored --unknown | awk  "( \$1 == \"?\" ) || ( \$1 == \"I\") { print \$2 }" | xargs rm -rv'
alias hgcleandryrun='hg status --ignored --unknown | awk  "( \$1 == \"?\" ) || ( \$1 == \"I\") { print \$2 }" '


# function backupresults
# {
#     V="$(date +'%F%R')"
#     I=$1
#     EXT=$2
#     BACKUPDIR="$HOME/esnapshots/${V}esnap_${I}_${EXT}"
#     if [ -d ${BACKUPDIR} ] ; then 
#       echo "collision!"
#     else
#       mkdir -p ${BACKUPDIR}
#       cp -a /local/scratch/esnap_${I}/*  ${BACKUPDIR}
#     fi
# }

# function onerunsimtorulethemall
# {
#     reset
#     clear
#     date 

#     TMPFILE="$(mktemp)"
#     ls -al /projects/huntington_A0/Work/jla | tee --append "${TMPFILE}"
#     hg --repository ~/myco/firmwaresrc parents | tee --append "${TMPFILE}"
#     hg --repository ~/myco/firmwaresrc diff | tee --append "${TMPFILE}"


#     COSIM_IDENTITY="$1"
#     RUN_VARIANT="$2"

#     echo 'cosim identity:' "$COSIM_IDENTITY"
#     echo 'run variant   :' "$RUN_VARIANT"

#     export COSIM_IDENTITY



#     COMMAND="time $HOME/myco/chip_test/src/tools/cosim/esnap "

#     # standard configuration for jlahacks
#     if   [ "$RUN_VARIANT" == 'hacks' ] ; then 
#         COMMAND="$COMMAND --farmi-lite --mccmdline hacks"
#     elif   [ "$RUN_VARIANT" == 'hackswithfsdb' ] ; then 
#         COMMAND="$COMMAND --farmi-lite --simv-args 'FSDB=1' --mccmdline hackswithfsdb"
#     # various combinations of speedups for snapper trivial
#     elif   [ "$RUN_VARIANT" == 'vanilla' ] ; then 
#         COMMAND="$COMMAND --farmi-lite --dutcfg min"
#     elif [ "$RUN_VARIANT" == 'lean' ] ; then
#         COMMAND="$COMMAND --farmi-lite --dutcfg min --lean "
#     elif [ "$RUN_VARIANT" == 'fullyhacked' ] ; then
#         COMMAND="$COMMAND --farmi-lite --dutcfg min --lean --simv-args 'MC_TLP_HACK=1' "
#     # and then those speedups with fsdb files being generated (takes twice the time to run)
#     elif [ "$RUN_VARIANT" == 'vanillawithfsdb' ] ; then
#         COMMAND="$COMMAND --farmi-lite --dutcfg min --simv-args 'FSDB=1'  "
#     elif [ "$RUN_VARIANT" == 'leanwithfsdb' ] ; then
#         COMMAND="$COMMAND --farmi-lite --dutcfg min --lean --simv-args 'FSDB=1'  "
#     elif [ "$RUN_VARIANT" == 'fullyhackedwithfsdb' ] ; then
#         COMMAND="$COMMAND --farmi-lite --dutcfg min --lean --simv-args 'MC_TLP_HACK=1 FSDB=1'"
#     else
#         echo "oops"
#         return
#     fi

#     #
#     COMMAND="$COMMAND trivial"

#     echo $COMMAND
#     eval "$COMMAND"
#     esnap_return_value=$?
#     echo "return value " $esnap_return_value

#     INFOFILE="/local/scratch/esnap_${COSIM_IDENTITY}/jlainfo" 
#     echo "writing status info from start of run (${TMPFILE}) into scratch directory as ${INFOFILE}"
#     cp "${TMPFILE}" "${INFOFILE}"

#     echo "to back up these results use: backupresults ${COSIM_IDENTITY}  ${RUN_VARIANT}"
#     return $esnap_return_value
# }

# alias sim1='onerunsimtorulethemall jla  hacks'
# alias sim2='onerunsimtorulethemall jla2 hacks'
# alias sim3='onerunsimtorulethemall jla3 hacks'
# alias sim4='onerunsimtorulethemall jla4 hacks'

# alias fsim1='onerunsimtorulethemall jla   hackswithfsdb'
# alias fsim2='onerunsimtorulethemall jla2  hackswithfsdb'
# alias fsim3='onerunsimtorulethemall jla3  hackswithfsdb'
# alias fsim4='onerunsimtorulethemall jla4  hackswithfsdb'

alias sbsx='source ~/.bashrc && set -x'
alias ll='ls -alrt'
alias e='emacsclient -n'
alias gitkall='git fsck --lost-found | awk "{ print \$3 ; }" | xargs gitk --all'

# alias cdhc='pushd ~/hobby-code'
# alias cdhw='pushd /projects/huntington_A0/Work/jla'
# alias cdfw='pushd ~/myco/firmwaresrc/'
# alias cdct='pushd ~/myco/chip_test'
# alias cdsf='pushd ~/Desktop/solarflare'
# alias cdgs='pushd /projects/huntington_A0/Work/jla/gitsvnhunt'

# alias fwtags='pushd ~/myco/firmwaresrc/ && mktags ; popd'
# alias remake='ssh -X anvil "make -j -C ~/myco/firmwaresrc world"'
# alias build_from_clean='ssh -X anvil "make -C ~/myco/firmwaresrc clean world"'

# function hgfw { hgtk --repository ~/myco/firmwaresrc log & disown ; } 

# end of stuff added for solarflare

# I always forget that ack is called ack-grep on debian, and that it doesn't search all
# text files by default. Therefore:
alias ack='ack-grep --text'

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"


function vcstatuses 
{
    for i in ~/hobby-code ~/data ; do
        echo "--" && echo "$i" && echo "--" && cd "$i" && git status && git log origin/master..master ; 
    done ;
    i=~/iqtest
    echo "--" && echo "$i" && echo "--" && cd "$i" && git status && git log origin/master..master && git log heroku/master..master; 

    # echo ~/hobby-code && cd ~/hobby-code/ && git status && git log origin/master..master ; 
    # echo ~/Desktop/solarflare && cd ~/Desktop/solarflare && hg status && hg outgoing ;
}

function gitguiall
{
    for i in ~/hobby-code/ ~/data ~/iqtest/ ; do cd $i && git gui ; done
}

function gitpushall
{
    for i in ~/hobby-code/ ~/data ~/iqtest/ ; do cd $i && git push ; done
}

function gitpullall
{
    for i in ~/hobby-code/ ~/data ~/iqtest/ ; do cd $i && git pull ; done
}


alias dgg="cd ~/data && git gui"
alias hgg="cd ~/hobby-code && git gui"
alias igg="cd ~/iqtest && git gui"
